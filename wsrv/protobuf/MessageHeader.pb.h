// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: MessageHeader.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_MessageHeader_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_MessageHeader_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_MessageHeader_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_MessageHeader_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_MessageHeader_2eproto;
namespace GaoProtobuf {
class MessageHeader;
struct MessageHeaderDefaultTypeInternal;
extern MessageHeaderDefaultTypeInternal _MessageHeader_default_instance_;
}  // namespace GaoProtobuf
PROTOBUF_NAMESPACE_OPEN
template<> ::GaoProtobuf::MessageHeader* Arena::CreateMaybeMessage<::GaoProtobuf::MessageHeader>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace GaoProtobuf {

// ===================================================================

class MessageHeader final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:GaoProtobuf.MessageHeader) */ {
 public:
  inline MessageHeader() : MessageHeader(nullptr) {}
  ~MessageHeader() override;
  explicit PROTOBUF_CONSTEXPR MessageHeader(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MessageHeader(const MessageHeader& from);
  MessageHeader(MessageHeader&& from) noexcept
    : MessageHeader() {
    *this = ::std::move(from);
  }

  inline MessageHeader& operator=(const MessageHeader& from) {
    CopyFrom(from);
    return *this;
  }
  inline MessageHeader& operator=(MessageHeader&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MessageHeader& default_instance() {
    return *internal_default_instance();
  }
  static inline const MessageHeader* internal_default_instance() {
    return reinterpret_cast<const MessageHeader*>(
               &_MessageHeader_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(MessageHeader& a, MessageHeader& b) {
    a.Swap(&b);
  }
  inline void Swap(MessageHeader* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MessageHeader* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MessageHeader* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MessageHeader>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MessageHeader& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const MessageHeader& from) {
    MessageHeader::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MessageHeader* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "GaoProtobuf.MessageHeader";
  }
  protected:
  explicit MessageHeader(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFromIdFieldNumber = 1,
    kToIdFieldNumber = 2,
    kGroupIdFieldNumber = 3,
    kTypeIdFieldNumber = 4,
    kNamespaceIdFieldNumber = 5,
    kClassIdFieldNumber = 6,
    kMethodIdFieldNumber = 7,
  };
  // int64 fromId = 1;
  void clear_fromid();
  int64_t fromid() const;
  void set_fromid(int64_t value);
  private:
  int64_t _internal_fromid() const;
  void _internal_set_fromid(int64_t value);
  public:

  // int64 toId = 2;
  void clear_toid();
  int64_t toid() const;
  void set_toid(int64_t value);
  private:
  int64_t _internal_toid() const;
  void _internal_set_toid(int64_t value);
  public:

  // int64 groupId = 3;
  void clear_groupid();
  int64_t groupid() const;
  void set_groupid(int64_t value);
  private:
  int64_t _internal_groupid() const;
  void _internal_set_groupid(int64_t value);
  public:

  // int32 typeId = 4;
  void clear_typeid_();
  int32_t typeid_() const;
  void set_typeid_(int32_t value);
  private:
  int32_t _internal_typeid_() const;
  void _internal_set_typeid_(int32_t value);
  public:

  // int32 namespaceId = 5;
  void clear_namespaceid();
  int32_t namespaceid() const;
  void set_namespaceid(int32_t value);
  private:
  int32_t _internal_namespaceid() const;
  void _internal_set_namespaceid(int32_t value);
  public:

  // int32 classId = 6;
  void clear_classid();
  int32_t classid() const;
  void set_classid(int32_t value);
  private:
  int32_t _internal_classid() const;
  void _internal_set_classid(int32_t value);
  public:

  // int32 methodId = 7;
  void clear_methodid();
  int32_t methodid() const;
  void set_methodid(int32_t value);
  private:
  int32_t _internal_methodid() const;
  void _internal_set_methodid(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:GaoProtobuf.MessageHeader)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int64_t fromid_;
    int64_t toid_;
    int64_t groupid_;
    int32_t typeid__;
    int32_t namespaceid_;
    int32_t classid_;
    int32_t methodid_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_MessageHeader_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// MessageHeader

// int64 fromId = 1;
inline void MessageHeader::clear_fromid() {
  _impl_.fromid_ = int64_t{0};
}
inline int64_t MessageHeader::_internal_fromid() const {
  return _impl_.fromid_;
}
inline int64_t MessageHeader::fromid() const {
  // @@protoc_insertion_point(field_get:GaoProtobuf.MessageHeader.fromId)
  return _internal_fromid();
}
inline void MessageHeader::_internal_set_fromid(int64_t value) {
  
  _impl_.fromid_ = value;
}
inline void MessageHeader::set_fromid(int64_t value) {
  _internal_set_fromid(value);
  // @@protoc_insertion_point(field_set:GaoProtobuf.MessageHeader.fromId)
}

// int64 toId = 2;
inline void MessageHeader::clear_toid() {
  _impl_.toid_ = int64_t{0};
}
inline int64_t MessageHeader::_internal_toid() const {
  return _impl_.toid_;
}
inline int64_t MessageHeader::toid() const {
  // @@protoc_insertion_point(field_get:GaoProtobuf.MessageHeader.toId)
  return _internal_toid();
}
inline void MessageHeader::_internal_set_toid(int64_t value) {
  
  _impl_.toid_ = value;
}
inline void MessageHeader::set_toid(int64_t value) {
  _internal_set_toid(value);
  // @@protoc_insertion_point(field_set:GaoProtobuf.MessageHeader.toId)
}

// int64 groupId = 3;
inline void MessageHeader::clear_groupid() {
  _impl_.groupid_ = int64_t{0};
}
inline int64_t MessageHeader::_internal_groupid() const {
  return _impl_.groupid_;
}
inline int64_t MessageHeader::groupid() const {
  // @@protoc_insertion_point(field_get:GaoProtobuf.MessageHeader.groupId)
  return _internal_groupid();
}
inline void MessageHeader::_internal_set_groupid(int64_t value) {
  
  _impl_.groupid_ = value;
}
inline void MessageHeader::set_groupid(int64_t value) {
  _internal_set_groupid(value);
  // @@protoc_insertion_point(field_set:GaoProtobuf.MessageHeader.groupId)
}

// int32 typeId = 4;
inline void MessageHeader::clear_typeid_() {
  _impl_.typeid__ = 0;
}
inline int32_t MessageHeader::_internal_typeid_() const {
  return _impl_.typeid__;
}
inline int32_t MessageHeader::typeid_() const {
  // @@protoc_insertion_point(field_get:GaoProtobuf.MessageHeader.typeId)
  return _internal_typeid_();
}
inline void MessageHeader::_internal_set_typeid_(int32_t value) {
  
  _impl_.typeid__ = value;
}
inline void MessageHeader::set_typeid_(int32_t value) {
  _internal_set_typeid_(value);
  // @@protoc_insertion_point(field_set:GaoProtobuf.MessageHeader.typeId)
}

// int32 namespaceId = 5;
inline void MessageHeader::clear_namespaceid() {
  _impl_.namespaceid_ = 0;
}
inline int32_t MessageHeader::_internal_namespaceid() const {
  return _impl_.namespaceid_;
}
inline int32_t MessageHeader::namespaceid() const {
  // @@protoc_insertion_point(field_get:GaoProtobuf.MessageHeader.namespaceId)
  return _internal_namespaceid();
}
inline void MessageHeader::_internal_set_namespaceid(int32_t value) {
  
  _impl_.namespaceid_ = value;
}
inline void MessageHeader::set_namespaceid(int32_t value) {
  _internal_set_namespaceid(value);
  // @@protoc_insertion_point(field_set:GaoProtobuf.MessageHeader.namespaceId)
}

// int32 classId = 6;
inline void MessageHeader::clear_classid() {
  _impl_.classid_ = 0;
}
inline int32_t MessageHeader::_internal_classid() const {
  return _impl_.classid_;
}
inline int32_t MessageHeader::classid() const {
  // @@protoc_insertion_point(field_get:GaoProtobuf.MessageHeader.classId)
  return _internal_classid();
}
inline void MessageHeader::_internal_set_classid(int32_t value) {
  
  _impl_.classid_ = value;
}
inline void MessageHeader::set_classid(int32_t value) {
  _internal_set_classid(value);
  // @@protoc_insertion_point(field_set:GaoProtobuf.MessageHeader.classId)
}

// int32 methodId = 7;
inline void MessageHeader::clear_methodid() {
  _impl_.methodid_ = 0;
}
inline int32_t MessageHeader::_internal_methodid() const {
  return _impl_.methodid_;
}
inline int32_t MessageHeader::methodid() const {
  // @@protoc_insertion_point(field_get:GaoProtobuf.MessageHeader.methodId)
  return _internal_methodid();
}
inline void MessageHeader::_internal_set_methodid(int32_t value) {
  
  _impl_.methodid_ = value;
}
inline void MessageHeader::set_methodid(int32_t value) {
  _internal_set_methodid(value);
  // @@protoc_insertion_point(field_set:GaoProtobuf.MessageHeader.methodId)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace GaoProtobuf

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_MessageHeader_2eproto
