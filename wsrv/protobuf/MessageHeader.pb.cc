// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: MessageHeader.proto

#include "MessageHeader.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace GaoProtobuf {
PROTOBUF_CONSTEXPR MessageHeader::MessageHeader(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.from_)*/int64_t{0}
  , /*decltype(_impl_.to_)*/int64_t{0}
  , /*decltype(_impl_.group_)*/int64_t{0}
  , /*decltype(_impl_.type_)*/0
  , /*decltype(_impl_.namespace__)*/0
  , /*decltype(_impl_.classs_)*/0
  , /*decltype(_impl_.method_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct MessageHeaderDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MessageHeaderDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MessageHeaderDefaultTypeInternal() {}
  union {
    MessageHeader _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MessageHeaderDefaultTypeInternal _MessageHeader_default_instance_;
}  // namespace GaoProtobuf
static ::_pb::Metadata file_level_metadata_MessageHeader_2eproto[1];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_MessageHeader_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_MessageHeader_2eproto = nullptr;

const uint32_t TableStruct_MessageHeader_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::GaoProtobuf::MessageHeader, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::GaoProtobuf::MessageHeader, _impl_.from_),
  PROTOBUF_FIELD_OFFSET(::GaoProtobuf::MessageHeader, _impl_.to_),
  PROTOBUF_FIELD_OFFSET(::GaoProtobuf::MessageHeader, _impl_.group_),
  PROTOBUF_FIELD_OFFSET(::GaoProtobuf::MessageHeader, _impl_.type_),
  PROTOBUF_FIELD_OFFSET(::GaoProtobuf::MessageHeader, _impl_.namespace__),
  PROTOBUF_FIELD_OFFSET(::GaoProtobuf::MessageHeader, _impl_.classs_),
  PROTOBUF_FIELD_OFFSET(::GaoProtobuf::MessageHeader, _impl_.method_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::GaoProtobuf::MessageHeader)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::GaoProtobuf::_MessageHeader_default_instance_._instance,
};

const char descriptor_table_protodef_MessageHeader_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\023MessageHeader.proto\022\013GaoProtobuf\"y\n\rMe"
  "ssageHeader\022\014\n\004from\030\001 \001(\003\022\n\n\002to\030\002 \001(\003\022\r\n"
  "\005group\030\003 \001(\003\022\014\n\004type\030\004 \001(\005\022\021\n\tnamespace\030"
  "\005 \001(\005\022\016\n\006classs\030\006 \001(\005\022\016\n\006method\030\007 \001(\005B\016\252"
  "\002\013GaoProtobufb\006proto3"
  ;
static ::_pbi::once_flag descriptor_table_MessageHeader_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_MessageHeader_2eproto = {
    false, false, 181, descriptor_table_protodef_MessageHeader_2eproto,
    "MessageHeader.proto",
    &descriptor_table_MessageHeader_2eproto_once, nullptr, 0, 1,
    schemas, file_default_instances, TableStruct_MessageHeader_2eproto::offsets,
    file_level_metadata_MessageHeader_2eproto, file_level_enum_descriptors_MessageHeader_2eproto,
    file_level_service_descriptors_MessageHeader_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_MessageHeader_2eproto_getter() {
  return &descriptor_table_MessageHeader_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_MessageHeader_2eproto(&descriptor_table_MessageHeader_2eproto);
namespace GaoProtobuf {

// ===================================================================

class MessageHeader::_Internal {
 public:
};

MessageHeader::MessageHeader(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:GaoProtobuf.MessageHeader)
}
MessageHeader::MessageHeader(const MessageHeader& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  MessageHeader* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.from_){}
    , decltype(_impl_.to_){}
    , decltype(_impl_.group_){}
    , decltype(_impl_.type_){}
    , decltype(_impl_.namespace__){}
    , decltype(_impl_.classs_){}
    , decltype(_impl_.method_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.from_, &from._impl_.from_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.method_) -
    reinterpret_cast<char*>(&_impl_.from_)) + sizeof(_impl_.method_));
  // @@protoc_insertion_point(copy_constructor:GaoProtobuf.MessageHeader)
}

inline void MessageHeader::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.from_){int64_t{0}}
    , decltype(_impl_.to_){int64_t{0}}
    , decltype(_impl_.group_){int64_t{0}}
    , decltype(_impl_.type_){0}
    , decltype(_impl_.namespace__){0}
    , decltype(_impl_.classs_){0}
    , decltype(_impl_.method_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

MessageHeader::~MessageHeader() {
  // @@protoc_insertion_point(destructor:GaoProtobuf.MessageHeader)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MessageHeader::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void MessageHeader::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MessageHeader::Clear() {
// @@protoc_insertion_point(message_clear_start:GaoProtobuf.MessageHeader)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.from_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.method_) -
      reinterpret_cast<char*>(&_impl_.from_)) + sizeof(_impl_.method_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MessageHeader::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 from = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.from_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 to = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.to_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 group = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.group_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 type = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 namespace = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.namespace__ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 classs = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _impl_.classs_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 method = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _impl_.method_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MessageHeader::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:GaoProtobuf.MessageHeader)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 from = 1;
  if (this->_internal_from() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_from(), target);
  }

  // int64 to = 2;
  if (this->_internal_to() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(2, this->_internal_to(), target);
  }

  // int64 group = 3;
  if (this->_internal_group() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(3, this->_internal_group(), target);
  }

  // int32 type = 4;
  if (this->_internal_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_type(), target);
  }

  // int32 namespace = 5;
  if (this->_internal_namespace_() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(5, this->_internal_namespace_(), target);
  }

  // int32 classs = 6;
  if (this->_internal_classs() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(6, this->_internal_classs(), target);
  }

  // int32 method = 7;
  if (this->_internal_method() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(7, this->_internal_method(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GaoProtobuf.MessageHeader)
  return target;
}

size_t MessageHeader::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GaoProtobuf.MessageHeader)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 from = 1;
  if (this->_internal_from() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_from());
  }

  // int64 to = 2;
  if (this->_internal_to() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_to());
  }

  // int64 group = 3;
  if (this->_internal_group() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_group());
  }

  // int32 type = 4;
  if (this->_internal_type() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_type());
  }

  // int32 namespace = 5;
  if (this->_internal_namespace_() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_namespace_());
  }

  // int32 classs = 6;
  if (this->_internal_classs() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_classs());
  }

  // int32 method = 7;
  if (this->_internal_method() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_method());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MessageHeader::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    MessageHeader::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MessageHeader::GetClassData() const { return &_class_data_; }


void MessageHeader::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<MessageHeader*>(&to_msg);
  auto& from = static_cast<const MessageHeader&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:GaoProtobuf.MessageHeader)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_from() != 0) {
    _this->_internal_set_from(from._internal_from());
  }
  if (from._internal_to() != 0) {
    _this->_internal_set_to(from._internal_to());
  }
  if (from._internal_group() != 0) {
    _this->_internal_set_group(from._internal_group());
  }
  if (from._internal_type() != 0) {
    _this->_internal_set_type(from._internal_type());
  }
  if (from._internal_namespace_() != 0) {
    _this->_internal_set_namespace_(from._internal_namespace_());
  }
  if (from._internal_classs() != 0) {
    _this->_internal_set_classs(from._internal_classs());
  }
  if (from._internal_method() != 0) {
    _this->_internal_set_method(from._internal_method());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MessageHeader::CopyFrom(const MessageHeader& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GaoProtobuf.MessageHeader)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MessageHeader::IsInitialized() const {
  return true;
}

void MessageHeader::InternalSwap(MessageHeader* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MessageHeader, _impl_.method_)
      + sizeof(MessageHeader::_impl_.method_)
      - PROTOBUF_FIELD_OFFSET(MessageHeader, _impl_.from_)>(
          reinterpret_cast<char*>(&_impl_.from_),
          reinterpret_cast<char*>(&other->_impl_.from_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MessageHeader::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_MessageHeader_2eproto_getter, &descriptor_table_MessageHeader_2eproto_once,
      file_level_metadata_MessageHeader_2eproto[0]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace GaoProtobuf
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::GaoProtobuf::MessageHeader*
Arena::CreateMaybeMessage< ::GaoProtobuf::MessageHeader >(Arena* arena) {
  return Arena::CreateMessageInternal< ::GaoProtobuf::MessageHeader >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
